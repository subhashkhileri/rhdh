# Copyright Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: PR

on:
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: 
    - main
    - release-1.[0-9]+

env:
  TURBO_SCM_BASE: ${{ github.event.pull_request.base.sha }}
  TURBO_SCM_HEAD: ${{ github.sha }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  authorize:
    # The 'external' environment is configured with the maintainers team as required reviewers.
    # All the subsequent jobs in this workflow 'need' this job, which will require manual approval for PRs coming from external forks.
    # see list of approvers in OWNERS file
    environment:
      ${{ github.event.pull_request.head.repo.full_name == github.repository && 'internal' || 'external' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check if internal PR
        id: check
        run: |
          if [[ "${{ github.event.pull_request.head.repo.full_name }}" == "${{ github.repository }}" ]]; then
            echo "✓ Internal PR - will run with PR code"
          else
            echo "✓ External PR - will run with base branch code for security"
          fi
  build:
    name: Build with Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22]
    needs: authorize
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Check Image and Relevant Changes
        id: check-image
        uses: ./.github/actions/check-image-and-changes

      - name: Setup Node.js
        if: ${{ steps.check-image.outputs.is_skipped != 'true' }}
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: "https://registry.npmjs.org"

      - name: Setup local Turbo cache
        if: ${{ steps.check-image.outputs.is_skipped != 'true' }}
        uses: dtinth/setup-github-actions-caching-for-turbo@cc723b4600e40a6b8815b65701d8614b91e2669e # v1

      - name: Use app-config.example.yaml
        if: ${{ steps.check-image.outputs.is_skipped != 'true' }}
        run: rm app-config.yaml && mv app-config.example.yaml app-config.yaml

      - name: Install dependencies
        if: ${{ steps.check-image.outputs.is_skipped != 'true' }}
        uses: backstage/actions/yarn-install@b3c1841fd69e1658ac631afafd0fb140a2309024 # v0.6.17
        with:
          cache-prefix: ${{ runner.os }}-v${{ matrix.node-version }}

      - name: Build packages
        if: ${{ steps.check-image.outputs.is_skipped != 'true' }}
        run: yarn run build --continue --affected

      - name: Install SealLight
        if: ${{ steps.check-image.outputs.is_skipped != 'true' }}
        run: yarn add -D slnodejs

      - name: Write SeaLights token into file
        if: ${{ steps.check-image.outputs.is_skipped != 'true' }}
        run: |
          echo "${SL_TOKEN}" > sltoken.txt
          echo "Token last 7 chars: ...${SL_TOKEN: -7}"
        env:
          SL_TOKEN: '${{secrets.SL_TOKEN}}'

      - name: Configure SealLight
        if: ${{ steps.check-image.outputs.is_skipped != 'true' }}
        run: |
          SHORT_SHA=$(echo "${{ github.event.pull_request.head.sha }}" | cut -c1-7)
          npx slnodejs config --tokenfile ./sltoken.txt --appname "rhdh" --branch "pr-${{ github.event.pull_request.number }}-${{ github.head_ref }}" --build "pr-${{ github.event.pull_request.number }}-${SHORT_SHA}-${{ github.run_id }}-${{ github.run_attempt }}"

      - name: Extract backend bundle for SealLight scan
        if: ${{ steps.check-image.outputs.is_skipped != 'true' }}
        run: tar -xzf packages/backend/dist/bundle.tar.gz -C packages/backend/dist

      - name: Update source map relative paths to absolute paths (plugins only)
        if: ${{ steps.check-image.outputs.is_skipped != 'true' }}
        run: |
          CONTAINER_SOURCE="${{ github.workspace }}"
          cd $CONTAINER_SOURCE && \
          for map_file in $(find plugins -path "*/dist/*.map" -type f); do \
              if grep -q '"sources"' "$map_file"; then \
                  plugin_base=${map_file%/dist/*}; \
                  sed -i -E "s|\"(\\.\\.?/)+([^\"]*)\"|\"$CONTAINER_SOURCE/$plugin_base/\\2\"|g" "$map_file"; \
              fi; \
          done

      - name: Scan all packages with SealLight
        if: ${{ steps.check-image.outputs.is_skipped != 'true' }}
        env:
          NODE_DEBUG: sl
        run: |
          # Define scan targets: workspace_path:module_id
          scan_targets=(
            "plugins/dynamic-plugins-info-backend:dynamic-plugins-info-backend"
            "plugins/scalprum-backend:scalprum-backend"
            "plugins/licensed-users-info-backend:licensed-users-info-backend"
            "plugins/dynamic-plugins-info:dynamic-plugins-info"
            "packages/app:app"
            "packages/backend/dist/packages/backend/dist:backend"
            "packages/app-next:app-next"
            "packages/plugin-utils:plugin-utils"
          )
          
          # Common scan parameters
          common_params="--tokenfile ./sltoken.txt --buildsessionidFile ./buildSessionId --excludedpaths webpack --scm none --projectroot ${{ github.workspace }}"
          
          # Verify build session file exists
          if [[ ! -f ./buildSessionId ]]; then
            echo "Error: buildSessionId file not found. SealLight session may not be properly initialized."
            exit 1
          fi
          
          # Verify build session file exists
          if [[ ! -f ./buildSessionId ]]; then
            echo "Error: buildSessionId file not found. SealLight session may not be properly initialized."
            exit 1
          fi
          
          # Scan each target
          for target in "${scan_targets[@]}"; do
            workspace_path="${target%:*}"
            module_id="${target#*:}"
            full_path="${{ github.workspace }}/$workspace_path"
            
            echo "Scanning $module_id at $workspace_path"
            echo "Full path: $full_path"
            
            # Verify the path exists
            if [[ ! -d "$full_path" ]]; then
              echo "Warning: Directory $full_path does not exist, skipping scan for $module_id"
              continue
            fi
            
            # Run the scan with error handling
            if ! npx slnodejs scan $common_params --workspacepath "$full_path" --uniqueModuleId "$module_id"; then
              echo "Error: SealLight scan failed for $module_id at $full_path"
              echo "Continuing with other scans..."
              continue
            fi
            
            echo "Successfully scanned $module_id"
          done

      - name: End SealLight build session
        if: ${{ steps.check-image.outputs.is_skipped != 'true' && always() }}
        run: |
          if [[ -f ./buildSessionId ]]; then
            npx slnodejs buildend --tokenfile ./sltoken.txt --buildsessionidFile ./buildSessionId --ok
          else
            echo "Warning: buildSessionId file not found, cannot end SealLight session"
          fi

  test:
    name: Test with Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22]
    needs: authorize
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Check Image and Relevant Changes
        id: check-image
        uses: ./.github/actions/check-image-and-changes

      - name: Setup Node.js
        if: ${{ steps.check-image.outputs.is_skipped != 'true' }}
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: "https://registry.npmjs.org"

      - name: Setup local Turbo cache
        if: ${{ steps.check-image.outputs.is_skipped != 'true' }}
        uses: dtinth/setup-github-actions-caching-for-turbo@cc723b4600e40a6b8815b65701d8614b91e2669e # v1

      - name: Use app-config.example.yaml
        if: ${{ steps.check-image.outputs.is_skipped != 'true' }}
        run: rm app-config.yaml && mv app-config.example.yaml app-config.yaml

      - name: Install dependencies
        if: ${{ steps.check-image.outputs.is_skipped != 'true' }}
        uses: backstage/actions/yarn-install@b3c1841fd69e1658ac631afafd0fb140a2309024 # v0.6.17
        with:
          cache-prefix: ${{ runner.os }}-v${{ matrix.node-version }}

      - name: Run prettier
        if: ${{ steps.check-image.outputs.is_skipped != 'true' }}
        run: yarn prettier:check --continue --affected

      - name: Run lint
        if: ${{ steps.check-image.outputs.is_skipped != 'true' }}
        run: yarn run lint:check --continue --affected

      - name: Run monorepo tools
        if: ${{ steps.check-image.outputs.is_skipped != 'true' }}
        run: yarn run monorepo:check

      - name: Regenerate dockerfiles
        if: ${{ steps.check-image.outputs.is_skipped != 'true' }}
        run: |
          yarn run build:dockerfile; if [[ $(git diff --name-only | grep Dockerfile || true) != "" ]]; then \
            echo "ERROR: Workspace is dirty! Must run 'yarn build:dockerfile' and commit changes!"; exit 1; \
          fi

      - name: Install SealLight
        if: ${{ steps.check-image.outputs.is_skipped != 'true' }}
        run: yarn add -D sealights-jest-plugin

      - name: Write SeaLights token into file
        if: ${{ steps.check-image.outputs.is_skipped != 'true' }}
        run: |
          echo "${SL_TOKEN}" > sltoken.txt
          echo "Token last 7 chars : ...${SL_TOKEN: -7}"
        env:
          SL_TOKEN: '${{secrets.SL_TOKEN}}'

      - name: Run tests
        if: ${{ steps.check-image.outputs.is_skipped != 'true' }}
        run: yarn run test-sealights --continue
        env:
          NODE_DEBUG: sl
          SL_LOG_LEVEL: debug
      - name: Install dynamic plugin dependencies
        if: ${{ steps.check-image.outputs.is_skipped != 'true' }}
        run: cd ./dynamic-plugins && yarn install && cd ..

      - name: Verify dynamic plugin wrappers
        if: ${{ steps.check-image.outputs.is_skipped != 'true' }}
        run: cd ./dynamic-plugins && yarn test && cd ..
